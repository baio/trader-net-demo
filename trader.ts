///<reference path="./typings/bluebird/bluebird.d.ts"/>
import Promise = require("bluebird");

export enum TicketCodes {}

export enum ActionTypes {
    Buy = 1,
    BuyOnMargin,
    Sell,
    SellShort
}

export enum OrderTypes {
    Market = 1,
    Limit,
    Stop,
    StopLimit
}

export enum CurrencyCodes {
    USD,
    EUR,
    RUR
}

export enum ExpirationTypes {
    Day = 1, //current market session
    DayExt, //Day / Night or Night / Day
    GTC //Till cancel
}

export interface IPutOrderData {
    ticket: TicketCodes
    action: ActionTypes
    orderType: OrderTypes
    currency: CurrencyCodes
    quantity: number
    limitPrice?: number
    stopPrice?: number
    allOrNothing?: boolean
    expiration?: ExpirationTypes
    groupPortfolio?: number
    userOrderId?: number
}


export interface ITrader {
    connect(authParams:any): Promise<any>
    putOrder(data:IPutOrderData): Promise<any>
}

export interface ISecurity {
    ticket: TicketCodes
    code: string
    lotSize: number
}


